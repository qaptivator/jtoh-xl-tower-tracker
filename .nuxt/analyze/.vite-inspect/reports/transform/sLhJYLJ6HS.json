{
  "resolvedId": "C:/Users/Andrew/Documents/GitHub/jtoh-xl-tower-tracker/pages/index.vue?vue&type=script&lang.ts",
  "transforms": [
    {
      "name": "vite:vue",
      "result": "\r\nexport default {\r\n  name: \"IndexPage\",\r\n  data() {\r\n    return {\r\n      username: \"\",\r\n      formError: \"\",\r\n      sortType: \"area\",\r\n      mostRecentAction: null as any,\r\n      playerBadges: [] as number[],\r\n      submitted: false,\r\n      loading: false,\r\n    };\r\n  },\r\n  mounted() {\r\n    const usernameQuery: any = this.$route.query.username;\r\n    if (usernameQuery) {\r\n      this.username = usernameQuery;\r\n      this.submitUsername();\r\n    }\r\n  },\r\n  /*computed: {\r\n    actions() {\r\n      return towerdata.actions.sort((a, b) => a.studs - b.studs);\r\n    },\r\n    ownedActions() {\r\n      return towerdata.actions\r\n        //.filter((el) => this.playerBadges.includes(el.badge))\r\n        .filter((el) => this.playerBadges.includes(el.badge))\r\n        .sort((a, b) => a.studs - b.studs); // b-a descending a-b ascending\r\n    },\r\n  },*/\r\n  methods: {\r\n    getPercentage(count: number, total: number) {\r\n      return ((count / total) * 100 || 0).toFixed(1);\r\n    },\r\n    getActions(actions: Action[] = towerdata.actions) {\r\n      return actions.sort((a, b) => a.studs - b.studs);\r\n    },\r\n    getOwnedActions(actions: Action[] = towerdata.actions) {\r\n      return actions\r\n        .filter((el) => this.playerBadges.includes(el.badge))\r\n        .sort((a, b) => a.studs - b.studs);\r\n    },\r\n    getAreaActions(areaId: number) {\r\n      return this.getActions().filter((el) => el.area === areaId);\r\n    },\r\n    getDiffActions(diffId: number) {\r\n      return this.getActions().filter((el) => roundDiff(el.studs) === diffId);\r\n    },\r\n    getAreaPercentage(areaId: number) {\r\n      const _total = this.getAreaActions(areaId);\r\n      const _owned = this.getOwnedActions(_total);\r\n      const _percentage = this.getPercentage(_owned.length, _total.length);\r\n\r\n      return {\r\n        text: `${_owned.length}/${_total.length} (${_percentage}%)`,\r\n        percentage: _percentage,\r\n      };\r\n\r\n      //return `${_ownedAreaActions.length}/${\r\n      //  _totalAreaActions.length\r\n      //} (${parseFloat(_percentageAreaActions.toString()).toFixed(1)}%)`;\r\n    },\r\n    getDiffPercentage(diffId: number) {\r\n      const _total = this.getDiffActions(diffId);\r\n      const _owned = this.getOwnedActions(_total);\r\n      const _percentage = this.getPercentage(_owned.length, _total.length);\r\n\r\n      return {\r\n        text: `${_owned.length}/${_total.length} (${_percentage}%)`,\r\n        percentage: _percentage,\r\n      };\r\n    },\r\n    getTotalActions() {\r\n      const _total = this.getActions();\r\n      const _owned = this.getOwnedActions();\r\n      const _percentage = this.getPercentage(_owned.length, _total.length);\r\n\r\n      return {\r\n        text: `Total: ${_owned.length}/${_total.length} (${_percentage}%)`,\r\n        percentage: _percentage,\r\n      };\r\n    },\r\n    getHardestAction() {\r\n      const _owned = this.getOwnedActions();\r\n      if (_owned.length > 0) {\r\n        const _hardest = _owned.reduce((prev, current) =>\r\n          prev.studs > current.studs ? prev : current\r\n        );\r\n        return {\r\n          text: `Hardest Completion: ${_hardest?.acronym || \"N/A\"}`,\r\n          color: getDiffColor(_hardest?.studs || 0),\r\n        };\r\n      } else {\r\n        return {\r\n          text: \"Hardest Completion: N/A\",\r\n          color: getDiffColor(0),\r\n        };\r\n      }\r\n    },\r\n    getMostRecentAction() {\r\n      if (this.mostRecentAction) {\r\n        return {\r\n          text: `Most Recent Completition: ${this.mostRecentAction.acronym}`,\r\n          color: getDiffColor(this.mostRecentAction.studs),\r\n        };\r\n      } else {\r\n        return {\r\n          text: \"Most Recent Completition: N/A\",\r\n          color: getDiffColor(0),\r\n        };\r\n      }\r\n    },\r\n    isActionDone(action: any) {\r\n      return this.playerBadges.includes(action.badge);\r\n    },\r\n    isBlank(str: string): boolean {\r\n      return !str || /^\\s*$/.test(str);\r\n    },\r\n    async submitUsername() {\r\n      if (this.isBlank(this.username)) return;\r\n\r\n      this.formError = \"\";\r\n      this.$router.push({\r\n        path: \"/\",\r\n        query: { username: this.username },\r\n      });\r\n\r\n      this.loading = true;\r\n      const id = await getIdFromUsername(this.username);\r\n      if (id) {\r\n        const timestamps = await getBadgeAwardedTimestampts(\r\n          id,\r\n          towerdata.actions.map((el: any) => el.badge)\r\n        );\r\n\r\n        if (timestamps.length > 0) {\r\n          const mostRecentBadge = timestamps.reduce((prev, current) =>\r\n            new Date(prev.awardedDate) > new Date(current.awardedDate)\r\n              ? prev\r\n              : current\r\n          ).badgeId;\r\n\r\n          this.playerBadges = timestamps.map((el) => el.badgeId);\r\n          this.mostRecentAction = towerdata.actions.filter(\r\n            (el) => el.badge === mostRecentBadge\r\n          )[0];\r\n        }\r\n        this.loading = false;\r\n        this.submitted = true;\r\n      } else {\r\n        this.loading = false;\r\n        this.formError = \"User does not exist\";\r\n      }\r\n    },\r\n  },\r\n};\r\n",
      "start": 1705353510325,
      "end": 1705353510325
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1705353510325,
      "end": 1705353510325,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1705353510325,
      "end": 1705353510325,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1705353510325,
      "end": 1705353510326,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1705353510326,
      "end": 1705353510326,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "result": "export default {\n  name: \"IndexPage\",\n  data() {\n    return {\n      username: \"\",\n      formError: \"\",\n      sortType: \"area\",\n      mostRecentAction: null,\n      playerBadges: [],\n      submitted: false,\n      loading: false\n    };\n  },\n  mounted() {\n    const usernameQuery = this.$route.query.username;\n    if (usernameQuery) {\n      this.username = usernameQuery;\n      this.submitUsername();\n    }\n  },\n  /*computed: {\n    actions() {\n      return towerdata.actions.sort((a, b) => a.studs - b.studs);\n    },\n    ownedActions() {\n      return towerdata.actions\n        //.filter((el) => this.playerBadges.includes(el.badge))\n        .filter((el) => this.playerBadges.includes(el.badge))\n        .sort((a, b) => a.studs - b.studs); // b-a descending a-b ascending\n    },\n  },*/\n  methods: {\n    getPercentage(count, total) {\n      return (count / total * 100 || 0).toFixed(1);\n    },\n    getActions(actions = towerdata.actions) {\n      return actions.sort((a, b) => a.studs - b.studs);\n    },\n    getOwnedActions(actions = towerdata.actions) {\n      return actions.filter((el) => this.playerBadges.includes(el.badge)).sort((a, b) => a.studs - b.studs);\n    },\n    getAreaActions(areaId) {\n      return this.getActions().filter((el) => el.area === areaId);\n    },\n    getDiffActions(diffId) {\n      return this.getActions().filter((el) => roundDiff(el.studs) === diffId);\n    },\n    getAreaPercentage(areaId) {\n      const _total = this.getAreaActions(areaId);\n      const _owned = this.getOwnedActions(_total);\n      const _percentage = this.getPercentage(_owned.length, _total.length);\n      return {\n        text: `${_owned.length}/${_total.length} (${_percentage}%)`,\n        percentage: _percentage\n      };\n    },\n    getDiffPercentage(diffId) {\n      const _total = this.getDiffActions(diffId);\n      const _owned = this.getOwnedActions(_total);\n      const _percentage = this.getPercentage(_owned.length, _total.length);\n      return {\n        text: `${_owned.length}/${_total.length} (${_percentage}%)`,\n        percentage: _percentage\n      };\n    },\n    getTotalActions() {\n      const _total = this.getActions();\n      const _owned = this.getOwnedActions();\n      const _percentage = this.getPercentage(_owned.length, _total.length);\n      return {\n        text: `Total: ${_owned.length}/${_total.length} (${_percentage}%)`,\n        percentage: _percentage\n      };\n    },\n    getHardestAction() {\n      const _owned = this.getOwnedActions();\n      if (_owned.length > 0) {\n        const _hardest = _owned.reduce(\n          (prev, current) => prev.studs > current.studs ? prev : current\n        );\n        return {\n          text: `Hardest Completion: ${_hardest?.acronym || \"N/A\"}`,\n          color: getDiffColor(_hardest?.studs || 0)\n        };\n      } else {\n        return {\n          text: \"Hardest Completion: N/A\",\n          color: getDiffColor(0)\n        };\n      }\n    },\n    getMostRecentAction() {\n      if (this.mostRecentAction) {\n        return {\n          text: `Most Recent Completition: ${this.mostRecentAction.acronym}`,\n          color: getDiffColor(this.mostRecentAction.studs)\n        };\n      } else {\n        return {\n          text: \"Most Recent Completition: N/A\",\n          color: getDiffColor(0)\n        };\n      }\n    },\n    isActionDone(action) {\n      return this.playerBadges.includes(action.badge);\n    },\n    isBlank(str) {\n      return !str || /^\\s*$/.test(str);\n    },\n    async submitUsername() {\n      if (this.isBlank(this.username))\n        return;\n      this.formError = \"\";\n      this.$router.push({\n        path: \"/\",\n        query: { username: this.username }\n      });\n      this.loading = true;\n      const id = await getIdFromUsername(this.username);\n      if (id) {\n        const timestamps = await getBadgeAwardedTimestampts(\n          id,\n          towerdata.actions.map((el) => el.badge)\n        );\n        if (timestamps.length > 0) {\n          const mostRecentBadge = timestamps.reduce(\n            (prev, current) => new Date(prev.awardedDate) > new Date(current.awardedDate) ? prev : current\n          ).badgeId;\n          this.playerBadges = timestamps.map((el) => el.badgeId);\n          this.mostRecentAction = towerdata.actions.filter(\n            (el) => el.badge === mostRecentBadge\n          )[0];\n        }\n        this.loading = false;\n        this.submitted = true;\n      } else {\n        this.loading = false;\n        this.formError = \"User does not exist\";\n      }\n    }\n  }\n};\n",
      "start": 1705353510373,
      "end": 1705353510450,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "C:/Users/Andrew/Documents/GitHub/jtoh-xl-tower-tracker/pages/index.vue?vue&type=script&lang.ts"
        ],
        "sourcesContent": [
          "\r\nexport default {\r\n  name: \"IndexPage\",\r\n  data() {\r\n    return {\r\n      username: \"\",\r\n      formError: \"\",\r\n      sortType: \"area\",\r\n      mostRecentAction: null as any,\r\n      playerBadges: [] as number[],\r\n      submitted: false,\r\n      loading: false,\r\n    };\r\n  },\r\n  mounted() {\r\n    const usernameQuery: any = this.$route.query.username;\r\n    if (usernameQuery) {\r\n      this.username = usernameQuery;\r\n      this.submitUsername();\r\n    }\r\n  },\r\n  /*computed: {\r\n    actions() {\r\n      return towerdata.actions.sort((a, b) => a.studs - b.studs);\r\n    },\r\n    ownedActions() {\r\n      return towerdata.actions\r\n        //.filter((el) => this.playerBadges.includes(el.badge))\r\n        .filter((el) => this.playerBadges.includes(el.badge))\r\n        .sort((a, b) => a.studs - b.studs); // b-a descending a-b ascending\r\n    },\r\n  },*/\r\n  methods: {\r\n    getPercentage(count: number, total: number) {\r\n      return ((count / total) * 100 || 0).toFixed(1);\r\n    },\r\n    getActions(actions: Action[] = towerdata.actions) {\r\n      return actions.sort((a, b) => a.studs - b.studs);\r\n    },\r\n    getOwnedActions(actions: Action[] = towerdata.actions) {\r\n      return actions\r\n        .filter((el) => this.playerBadges.includes(el.badge))\r\n        .sort((a, b) => a.studs - b.studs);\r\n    },\r\n    getAreaActions(areaId: number) {\r\n      return this.getActions().filter((el) => el.area === areaId);\r\n    },\r\n    getDiffActions(diffId: number) {\r\n      return this.getActions().filter((el) => roundDiff(el.studs) === diffId);\r\n    },\r\n    getAreaPercentage(areaId: number) {\r\n      const _total = this.getAreaActions(areaId);\r\n      const _owned = this.getOwnedActions(_total);\r\n      const _percentage = this.getPercentage(_owned.length, _total.length);\r\n\r\n      return {\r\n        text: `${_owned.length}/${_total.length} (${_percentage}%)`,\r\n        percentage: _percentage,\r\n      };\r\n\r\n      //return `${_ownedAreaActions.length}/${\r\n      //  _totalAreaActions.length\r\n      //} (${parseFloat(_percentageAreaActions.toString()).toFixed(1)}%)`;\r\n    },\r\n    getDiffPercentage(diffId: number) {\r\n      const _total = this.getDiffActions(diffId);\r\n      const _owned = this.getOwnedActions(_total);\r\n      const _percentage = this.getPercentage(_owned.length, _total.length);\r\n\r\n      return {\r\n        text: `${_owned.length}/${_total.length} (${_percentage}%)`,\r\n        percentage: _percentage,\r\n      };\r\n    },\r\n    getTotalActions() {\r\n      const _total = this.getActions();\r\n      const _owned = this.getOwnedActions();\r\n      const _percentage = this.getPercentage(_owned.length, _total.length);\r\n\r\n      return {\r\n        text: `Total: ${_owned.length}/${_total.length} (${_percentage}%)`,\r\n        percentage: _percentage,\r\n      };\r\n    },\r\n    getHardestAction() {\r\n      const _owned = this.getOwnedActions();\r\n      if (_owned.length > 0) {\r\n        const _hardest = _owned.reduce((prev, current) =>\r\n          prev.studs > current.studs ? prev : current\r\n        );\r\n        return {\r\n          text: `Hardest Completion: ${_hardest?.acronym || \"N/A\"}`,\r\n          color: getDiffColor(_hardest?.studs || 0),\r\n        };\r\n      } else {\r\n        return {\r\n          text: \"Hardest Completion: N/A\",\r\n          color: getDiffColor(0),\r\n        };\r\n      }\r\n    },\r\n    getMostRecentAction() {\r\n      if (this.mostRecentAction) {\r\n        return {\r\n          text: `Most Recent Completition: ${this.mostRecentAction.acronym}`,\r\n          color: getDiffColor(this.mostRecentAction.studs),\r\n        };\r\n      } else {\r\n        return {\r\n          text: \"Most Recent Completition: N/A\",\r\n          color: getDiffColor(0),\r\n        };\r\n      }\r\n    },\r\n    isActionDone(action: any) {\r\n      return this.playerBadges.includes(action.badge);\r\n    },\r\n    isBlank(str: string): boolean {\r\n      return !str || /^\\s*$/.test(str);\r\n    },\r\n    async submitUsername() {\r\n      if (this.isBlank(this.username)) return;\r\n\r\n      this.formError = \"\";\r\n      this.$router.push({\r\n        path: \"/\",\r\n        query: { username: this.username },\r\n      });\r\n\r\n      this.loading = true;\r\n      const id = await getIdFromUsername(this.username);\r\n      if (id) {\r\n        const timestamps = await getBadgeAwardedTimestampts(\r\n          id,\r\n          towerdata.actions.map((el: any) => el.badge)\r\n        );\r\n\r\n        if (timestamps.length > 0) {\r\n          const mostRecentBadge = timestamps.reduce((prev, current) =>\r\n            new Date(prev.awardedDate) > new Date(current.awardedDate)\r\n              ? prev\r\n              : current\r\n          ).badgeId;\r\n\r\n          this.playerBadges = timestamps.map((el) => el.badgeId);\r\n          this.mostRecentAction = towerdata.actions.filter(\r\n            (el) => el.badge === mostRecentBadge\r\n          )[0];\r\n        }\r\n        this.loading = false;\r\n        this.submitted = true;\r\n      } else {\r\n        this.loading = false;\r\n        this.formError = \"User does not exist\";\r\n      }\r\n    },\r\n  },\r\n};\r\n"
        ],
        "mappings": "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",
        "names": []
      }
    },
    {
      "name": "vite:json",
      "start": 1705353510450,
      "end": 1705353510450,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1705353510450,
      "end": 1705353510450,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1705353510450,
      "end": 1705353510451,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1705353510451,
      "end": 1705353510451,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1705353510451,
      "end": 1705353510451,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1705353510452,
      "end": 1705353510452,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1705353510452,
      "end": 1705353510452,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1705353510452,
      "end": 1705353510452,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1705353510452,
      "end": 1705353510452,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1705353510452,
      "end": 1705353510452,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1705353510452,
      "end": 1705353510452,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1705353510452,
      "end": 1705353510452,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1705353510452,
      "end": 1705353510452,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1705353510452,
      "end": 1705353510452,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1705353510452,
      "end": 1705353510452,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1705353510452,
      "end": 1705353510452,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1705353510453,
      "end": 1705353510457,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1705353510458,
      "end": 1705353510460,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1705353510460,
      "end": 1705353510460,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "result": "import { towerdata } from 'C:/Users/Andrew/Documents/GitHub/jtoh-xl-tower-tracker/utils/towerdata.ts';\nimport { roundDiff, getDiffColor } from 'C:/Users/Andrew/Documents/GitHub/jtoh-xl-tower-tracker/utils/tower.ts';\nimport { getIdFromUsername, getBadgeAwardedTimestampts } from 'C:/Users/Andrew/Documents/GitHub/jtoh-xl-tower-tracker/utils/roblox.ts';\nexport default {\n  name: \"IndexPage\",\n  data() {\n    return {\n      username: \"\",\n      formError: \"\",\n      sortType: \"area\",\n      mostRecentAction: null,\n      playerBadges: [],\n      submitted: false,\n      loading: false\n    };\n  },\n  mounted() {\n    const usernameQuery = this.$route.query.username;\n    if (usernameQuery) {\n      this.username = usernameQuery;\n      this.submitUsername();\n    }\n  },\n  /*computed: {\n    actions() {\n      return towerdata.actions.sort((a, b) => a.studs - b.studs);\n    },\n    ownedActions() {\n      return towerdata.actions\n        //.filter((el) => this.playerBadges.includes(el.badge))\n        .filter((el) => this.playerBadges.includes(el.badge))\n        .sort((a, b) => a.studs - b.studs); // b-a descending a-b ascending\n    },\n  },*/\n  methods: {\n    getPercentage(count, total) {\n      return (count / total * 100 || 0).toFixed(1);\n    },\n    getActions(actions = towerdata.actions) {\n      return actions.sort((a, b) => a.studs - b.studs);\n    },\n    getOwnedActions(actions = towerdata.actions) {\n      return actions.filter((el) => this.playerBadges.includes(el.badge)).sort((a, b) => a.studs - b.studs);\n    },\n    getAreaActions(areaId) {\n      return this.getActions().filter((el) => el.area === areaId);\n    },\n    getDiffActions(diffId) {\n      return this.getActions().filter((el) => roundDiff(el.studs) === diffId);\n    },\n    getAreaPercentage(areaId) {\n      const _total = this.getAreaActions(areaId);\n      const _owned = this.getOwnedActions(_total);\n      const _percentage = this.getPercentage(_owned.length, _total.length);\n      return {\n        text: `${_owned.length}/${_total.length} (${_percentage}%)`,\n        percentage: _percentage\n      };\n    },\n    getDiffPercentage(diffId) {\n      const _total = this.getDiffActions(diffId);\n      const _owned = this.getOwnedActions(_total);\n      const _percentage = this.getPercentage(_owned.length, _total.length);\n      return {\n        text: `${_owned.length}/${_total.length} (${_percentage}%)`,\n        percentage: _percentage\n      };\n    },\n    getTotalActions() {\n      const _total = this.getActions();\n      const _owned = this.getOwnedActions();\n      const _percentage = this.getPercentage(_owned.length, _total.length);\n      return {\n        text: `Total: ${_owned.length}/${_total.length} (${_percentage}%)`,\n        percentage: _percentage\n      };\n    },\n    getHardestAction() {\n      const _owned = this.getOwnedActions();\n      if (_owned.length > 0) {\n        const _hardest = _owned.reduce(\n          (prev, current) => prev.studs > current.studs ? prev : current\n        );\n        return {\n          text: `Hardest Completion: ${_hardest?.acronym || \"N/A\"}`,\n          color: getDiffColor(_hardest?.studs || 0)\n        };\n      } else {\n        return {\n          text: \"Hardest Completion: N/A\",\n          color: getDiffColor(0)\n        };\n      }\n    },\n    getMostRecentAction() {\n      if (this.mostRecentAction) {\n        return {\n          text: `Most Recent Completition: ${this.mostRecentAction.acronym}`,\n          color: getDiffColor(this.mostRecentAction.studs)\n        };\n      } else {\n        return {\n          text: \"Most Recent Completition: N/A\",\n          color: getDiffColor(0)\n        };\n      }\n    },\n    isActionDone(action) {\n      return this.playerBadges.includes(action.badge);\n    },\n    isBlank(str) {\n      return !str || /^\\s*$/.test(str);\n    },\n    async submitUsername() {\n      if (this.isBlank(this.username))\n        return;\n      this.formError = \"\";\n      this.$router.push({\n        path: \"/\",\n        query: { username: this.username }\n      });\n      this.loading = true;\n      const id = await getIdFromUsername(this.username);\n      if (id) {\n        const timestamps = await getBadgeAwardedTimestampts(\n          id,\n          towerdata.actions.map((el) => el.badge)\n        );\n        if (timestamps.length > 0) {\n          const mostRecentBadge = timestamps.reduce(\n            (prev, current) => new Date(prev.awardedDate) > new Date(current.awardedDate) ? prev : current\n          ).badgeId;\n          this.playerBadges = timestamps.map((el) => el.badgeId);\n          this.mostRecentAction = towerdata.actions.filter(\n            (el) => el.badge === mostRecentBadge\n          )[0];\n        }\n        this.loading = false;\n        this.submitted = true;\n      } else {\n        this.loading = false;\n        this.formError = \"User does not exist\";\n      }\n    }\n  }\n};\n",
      "start": 1705353510461,
      "end": 1705353510473,
      "order": "post",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": ";;;AAAA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5B,CAAC,CAAC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpjC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnvD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5G,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACljD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3E,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpjD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3E,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvdxvC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,C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AAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClxD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACppB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjhD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AACH,CAAC,CAAC;"
      }
    },
    {
      "name": "unctx:transform",
      "start": 1705353510473,
      "end": 1705353510473,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1705353510478,
      "end": 1705353510478,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1705353510478,
      "end": 1705353510478,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1705353510479,
      "end": 1705353510479,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1705353510479,
      "end": 1705353510479,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1705353510479,
      "end": 1705353510479,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1705353510479,
      "end": 1705353510480,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1705353510480,
      "end": 1705353510480,
      "order": "normal"
    }
  ]
}
